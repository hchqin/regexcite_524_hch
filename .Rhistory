install.packages("jsonlite", type = "source")
install.packages(c('tidyverse', 'renv', 'usethis', 'devtools', 'markdown', 'rmarkdown', 'languageserver', 'janitor', 'gapminder', 'readxl'))
devtools::install_github("ucbds-infra/ottr@stable")
devtools::install_github("ttimbers/canlang")
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
example(stan_model, package = "rstan", run.dontrun = TRUE)
install.packages('IRkernel')
IRkernel::installspec()
library(IRkernel)
IRkernel::installspec()
library(IRkernel)
IRkernel::installspec()
install.packages('tinytex')
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
install.packages("testthat")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
a <- 1-0.8
a
a <- 1-0.8=0.2
knitr::opts_chunk$set(echo = TRUE)
answer7_1 <- 0.88
answer7_2 <- NULL
answer7_3 <- NULL
answer7_4 <- NULL
answer7_5 <- NULL
# YOUR CODE HERE
=1-0.09^20
1-0.009 ^ 20
1-0.09 ^ 20
5000 / 5000000
1 - 0.999^20
0.09 ^20
read_excel()
library(readxl)
read_excel()?
help (read_excel())
?help()
?read_excel()
install.packages("ottr")
install.packages("ottr")
install.packages("ottr")
library(gapminder)
gap <- gapminder
gap |> slice(1)
library(dplyr)
gap |> slice(1)
gapminder[,-year]
gapminder
gapminder[,-"year"]
gapminder[,-c("year")]
gapminder[, year]
gapminder[, "year"]
library(purrr)
f1 <- function(x, y, z) {
x + y + z
}
pmap_dbl(list(c(1, 1), c(1, 2), c(2, 2)), f1)
plot(cars)
library(infer)
library(tidyverse)
library(testthat)
set.seed(1)
test_generate <- gss |>
specify(response = hours) |>
generate(reps = 10, type = "bootstrap")
set.seed(1)
test_re_sample_n <- gss |>
select(hours) |>
rep_sample_n(nrow(gss), replace = TRUE, reps = 10)
expect_equal(test_generate$hours, test_re_sample_n$hours)
expect_equal(test_generate$hours, test_re_sample_n$hours)
> expect_equal(test_generate$hours, test_re_sample_n$hours)
expect_equal(test_generate$hours, test_re_sample_n$hours)
expect_equal(test_generate$hours, 1)
View(test_generate)
View(test_re_sample_n)
library(infer)
library(tidyverse)
library(testthat)
set.seed(1)
test_generate <- gss |>
specify(response = hours) |>
generate(reps = 10000, type = "bootstrap")
set.seed(1)
test_re_sample_n <- gss |>
select(hours) |>
rep_sample_n(nrow(gss), replace = TRUE, reps = 10000)
expect_equal(test_generate$hours, test_re_sample_n$hours)
View(test_generate)
View(test_re_sample_n)
view(penguin)
library(infer)
library(tidyverse)
library(testthat)
library(palmerpenguins)
set.seed(1)
test_generate <- penguins |>
specify(response = hours) |>
generate(reps = 10000, type = "bootstrap")
View(penguins)
library(infer)
library(tidyverse)
library(testthat)
set.seed(552)
test_generate2 <- gss |>
specify(response = hours) |>
generate(reps = 2, type = "bootstrap")
set.seed(552)
test_re_sample_n2 <- gss |>
select(hours) |>
rep_sample_n(nrow(gss), replace = TRUE, reps = 2)
expect_equal(test_generate2$hours, test_re_sample_n2$hours)
library(infer)
library(tidyverse)
library(testthat)
set.seed(552)
test_generate2 <- gss |>
specify(response = hours) |>
generate(reps = 200, type = "bootstrap")
set.seed(552)
test_re_sample_n2 <- gss |>
select(hours) |>
rep_sample_n(nrow(gss), replace = TRUE, reps = 200)
expect_equal(test_generate2$hours, test_re_sample_n2$hours)
View(gss)
library(infer)
library(tidyverse)
library(testthat)
set.seed(552)
test_generate2 <- gss |>
specify(response = weight) |>
generate(reps = 200, type = "bootstrap")
set.seed(552)
test_re_sample_n2 <- gss |>
select(weight) |>
rep_sample_n(nrow(gss), replace = TRUE, reps = 200)
expect_equal(test_generate2$weight, test_re_sample_n2$weight)
setwd("D:/UBC/Labs/DSCI_524/regexcite_524_hch")
library(devtools)
packageVersion("devtools")
create_package("~")
pwd()
cd()
getwd()
create_package("D:/UBC/Labs/DSCI_524/regexcite_524_hch")
create_package("D:/UBC/Labs/DSCI_524/regexcite")
